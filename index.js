const express = require('express');
const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');

const app = express();
const PORT = process.env.PORT || 3000;

// ‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;

// –ü—Ä—è–º–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–π chat ID (–∫–∞–∫ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏—Å—å)
const CHAT_ID = 235189880;

// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –ë–ï–ó polling ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ webhook
const bot = new TelegramBot(TELEGRAM_TOKEN);

// --- Webhook/Express ---
const BASE_URL = 'https://monitoring-bnb-i-pr.onrender.com'; // —Ç–≤–æ–π Render URL
app.use(express.json());
app.post(`/bot${TELEGRAM_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// –ü—Ä–æ—Å—Ç–æ–π healthcheck (–¥–ª—è UptimeRobot –∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
app.get('/', (req, res) => {
  res.send('Crypto Signal Bot is running!');
});

// --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ ---
const coins = [
  'BNBUSDC', 'BTCUSDC', 'ETHUSDC', 'LINKUSDC',
  'AVAXUSDC', 'DOTUSDC', 'TONUSDC', 'SOLUSDC', 'SUIUSDC'
];

const thresholds = {
  RSI: 32,   // RSI14 ‚â§ 32
  BB: 0.20   // BB%B(20,2) ‚â§ 0.20
};

// –¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª–∞ ¬´‚àí1% –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º¬ª
const lastSignalPrice = {};

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function formatPriceRu(n) {
  return n.toLocaleString('ru-RU', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
}

function calculateRSI(closes, period = 14) {
  if (closes.length < period + 1) return null;
  let gains = 0, losses = 0;
  for (let i = 1; i <= period; i++) {
    const diff = closes[i] - closes[i - 1];
    if (diff > 0) gains += diff; else losses += Math.abs(diff);
  }
  const avgGain = gains / period;
  const avgLoss = losses / period;
  const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;
  return 100 - (100 / (1 + rs));
}

function calculateBBPercent(closes) {
  if (!closes || closes.length < 2) return null;
  const len = closes.length;
  const mean = closes.reduce((a, b) => a + b, 0) / len;
  const variance = closes.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / len;
  const std = Math.sqrt(variance);
  const upper = mean + 2 * std;
  const lower = mean - 2 * std;
  const last = closes[len - 1];
  return (last - lower) / (upper - lower);
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ ---
async function checkIndicators() {
  const now = new Date();
  // –í—Ä–µ–º—è –≤ –∑–æ–Ω–µ UTC+2 (Etc/GMT-2 ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è UTC+2)
  const timeStr = now.toLocaleString('ru-RU', { timeZone: 'Etc/GMT-2' });

  for (const coin of coins) {
    try {
      const { data } = await axios.get(
        `https://api.binance.com/api/v3/klines?symbol=${coin}&interval=5m&limit=20`,
        { timeout: 15000 }
      );
      const closes = data.map(c => parseFloat(c[4]));
      if (!closes || closes.length < 15) {
        console.warn(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${coin}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }

      const rsi = calculateRSI(closes, 14);
      const bbPercent = calculateBBPercent(closes);
      const price = closes[closes.length - 1];

      if (rsi == null || bbPercent == null || !Number.isFinite(price)) {
        console.warn(`–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è ${coin}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }

      const signal = (rsi <= thresholds.RSI) && (bbPercent <= thresholds.BB);

      // –ü—Ä–∞–≤–∏–ª–æ ¬´—Å–ª–µ–¥—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–∞–¥–µ–Ω–∏—è –µ—â—ë –Ω–∞ 1%¬ª
      if (signal && lastSignalPrice[coin]) {
        const minPrice = lastSignalPrice[coin] * 0.99; // 1% –Ω–∏–∂–µ —Ü–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        if (price > minPrice) {
          console.log(`${coin} | –±–ª–æ–∫: –ø—Ä–∞–≤–∏–ª–æ -1% (—Ç–µ–∫—É—â–∞—è=${formatPriceRu(price)}, –ø—Ä–µ–¥—ã–¥—É—â–∞—è=${formatPriceRu(lastSignalPrice[coin])})`);
          continue;
        }
      }

      console.log(`${coin} | –¶–µ–Ω–∞: ${formatPriceRu(price)}, RSI: ${rsi.toFixed(2)}, BB%: ${bbPercent.toFixed(2)}, Signal: ${signal}`);

      if (signal) {
        const msg =
          `–ú–æ–Ω–µ—Ç–∞: ${coin}\n` +
          `–°–∏–≥–Ω–∞–ª —Å—Ä–∞–±–æ—Ç–∞–ª: ${timeStr}\n` +
          `–ö—É—Ä—Å: ${formatPriceRu(price)}`;
        await bot.sendMessage(CHAT_ID, msg);
        lastSignalPrice[coin] = price; // —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª–∞ -1%
      }
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${coin}:`, err.message);
    }
  }
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (webhook + —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + —Ü–∏–∫–ª) ---
async function init() {
  try {
    // –ü–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π webhook –∏ —Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–π
    await bot.deleteWebHook().catch(() => {});
    const url = `${BASE_URL}/bot${TELEGRAM_TOKEN}`;
    await bot.setWebHook(url);
    console.log(`Webhook set to ${url}`);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', e.message);
  }

  try {
    await bot.sendMessage(CHAT_ID, '–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É! üöÄ');
  } catch (e) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }

  // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
  await checkIndicators();
  // –î–∞–ª—å—à–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  setInterval(checkIndicators, 5 * 60 * 1000);
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ + –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app.listen(PORT, () => {
  console.log(`Server is listening on port ${PORT}`);
  init().catch(err => console.error('Init error:', err));
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ Promises, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Ç–µ—Ä—è–ª–æ—Å—å –≤ –ª–æ–≥–∞—Ö
process.on('unhandledRejection', (reason) => {
  console.error('Unhandled rejection:', reason);
});
